{"version":3,"sources":["app.js","environment.js","main.js","routes.js","common/app-config.js","middleware/authorize-step.js","middleware/pre-login-url.js","resources/index.js","services/auth-service.js","features/account/login.js","features/account/profile.js","features/account/register.js","features/home/landing.js","features/nav/nav-bar.js","D:/Projects/Hoard/Repo/hoard-web/src/app.html","D:/Projects/Hoard/Repo/hoard-web/src/features/account/login.html","D:/Projects/Hoard/Repo/hoard-web/src/features/account/profile.html","D:/Projects/Hoard/Repo/hoard-web/src/features/account/register.html","D:/Projects/Hoard/Repo/hoard-web/src/features/home/landing.html","D:/Projects/Hoard/Repo/hoard-web/src/features/nav/nav-bar.html"],"names":["App","configureRouter","config","router","title","map","debug","testing","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","modulePrefix","route","moduleId","name","nav","reqLogin","navHideIfLoggedIn","hideNavbar","AppConfig","apiUrl","apiTokenStorageKey","defaultLanguage","AuthorizeStep","authService","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","cancel","PreLoginUrl","routingContext","skipRoutes","indexOf","url","fragment","AuthService","appConfig","removeApiToken","localStorage","removeItem","authorizeRequest","request","apiToken","headers","append","getItem","newToken","setItem","Login","Profile","Register","Landing","message","NavBar","loadNavigation","customNav","navigation","navModel","push","bind","logout","history","go"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import AppConfig from './common/app-config'\r\nimport routes from './routes';\r\n\r\nexport class App {\r\n  configureRouter(config, router) {\r\n    this.router = router;\r\n    config.title = AppConfig.title;\r\n    config.map(routes);\r\n  }\r\n}\r\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import environment from './environment';\r\n\r\n//Configure Bluebird Promises.\r\n//Note: You may want to use environment-specific configuration.\r\nPromise.config({\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","const modulePrefix = 'features';\r\n\r\nexport default [\r\n  {\r\n    route:    '',\r\n    moduleId: `${modulePrefix}/home/landing`,\r\n    name:     'landing',\r\n    title:    'Get started'\r\n  },\r\n  {\r\n    route:    'profile',\r\n    moduleId: `${modulePrefix}/account/profile`,\r\n    name:     'profile',\r\n    title:    'Profile',\r\n    nav:      true,\r\n    reqLogin: true\r\n  },\r\n  {\r\n    route:             'register',\r\n    moduleId:          `${modulePrefix}/account/register`,\r\n    name:              'register',\r\n    title:             'Register',\r\n    nav:               true,\r\n    navHideIfLoggedIn: true,\r\n    hideNavbar:        true\r\n  },\r\n  {\r\n    route:             'login',\r\n    moduleId:          `${modulePrefix}/account/login`,\r\n    name:              'login',\r\n    title:             'Login',\r\n    nav:               true,\r\n    navHideIfLoggedIn: true,\r\n    hideNavbar:        true\r\n  }\r\n]\r\n","let AppConfig = {\r\n  title: 'Hoard',\r\n  apiUrl: 'http://localhost:666',\r\n  apiTokenStorageKey: 'apiToken',\r\n  defaultLanguage: 'en',\r\n}\r\n\r\nexport default AppConfig;\r\n","import {inject} from 'aurelia-framework';\r\nimport AuthService from '../services/auth-service';\r\nimport {Redirect} from 'aurelia-router';\r\n\r\n@inject(AuthService)\r\nexport default class AuthorizeStep {\r\n  constructor(authService) {\r\n    this.authService = authService;\r\n  }\r\n\r\n  run(navigationInstruction, next) {\r\n    if (navigationInstruction.getAllInstructions().some(i => i.config.reqLogin)) {\r\n      if (!this.authService.isLoggedIn) {\r\n        return next.cancel(new Redirect('login'));\r\n      }\r\n    }\r\n    return next();\r\n  }\r\n}\r\n","export default class PreLoginUrl {\r\n  run(routingContext, next) {\r\n    let skipRoutes = ['login', 'register'];\r\n    if (skipRoutes.indexOf(routingContext.config.name) === -1) {\r\n      this.url = routingContext.fragment;\r\n    }\r\n    return next();\r\n  }\r\n}\r\n","export function configure(config) {\r\n  //config.globalResources([]);\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport AppConfig from '../common/app-config';\r\n\r\n@inject(AppConfig)\r\nexport default class AuthService {\r\n  constructor(appConfig) {\r\n    this.appConfig = appConfig;\r\n  }\r\n\r\n  get apiToken() {\r\n    return localStorage.getItem(this.appConfig.apiTokenStorageKey);\r\n  }\r\n\r\n  set apiToken(newToken) {\r\n    localStorage.setItem(this.appConfig.apiTokenStorageKey, newToken);\r\n  }\r\n\r\n  removeApiToken() {\r\n    localStorage.removeItem(this.appConfig.apiTokenStorageKey);\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return !!this.apiToken;\r\n  }\r\n\r\n  authorizeRequest(request) {\r\n    if (this.apiToken && request.headers.append) {\r\n      request.headers.append('Authorization', `Token ${this.apiToken}`);\r\n    }\r\n    return request;\r\n  }\r\n}\r\n","export class Login {\r\n  constructor() {\r\n  }\r\n}\r\n","export class Profile {\r\n  constructor() {\r\n  }\r\n}\r\n","export class Register {\r\n  constructor() {\r\n  }\r\n}\r\n","export class Landing {\r\n  constructor() {\r\n    this.message = 'Hello!';\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport AuthService from '../../services/auth-service';\r\n\r\n@inject(Router, AuthService)\r\nexport class NavBar {\r\n  constructor(router, authService) {\r\n    this.router = router;\r\n    this.authService = authService;\r\n  }\r\n\r\n  loadNavigation() {\r\n    let customNav = [];\r\n    for (let navModel of this.router.navigation) {\r\n      if (!\r\n          ((  this.authService.isLoggedIn && navModel.config.navHideIfLoggedIn ) ||\r\n           ( !this.authService.isLoggedIn && navModel.config.reqLogin ))) {\r\n            customNav.push(navModel);\r\n          }\r\n    }\r\n    return customNav;\r\n  }\r\n\r\n  bind() {\r\n    // This assignment is placed in the bind callback so that the navigation\r\n    // links can be re-rendered after the login (that navigates back to\r\n    // the previous view).\r\n    this.navigation = this.loadNavigation();\r\n  }\r\n\r\n  // TODO: This should probably be moved to a separate route, but so far\r\n  //       I couldn't figure out how to make it work properly (with navbar refresh, etc.)\r\n  logout() {\r\n    this.authService.removeApiToken();\r\n    history.go(0);\r\n  }\r\n}\r\n",null,null,null,null,null,null],"sourceRoot":"..\\src"}